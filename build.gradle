import java.nio.charset.StandardCharsets

plugins {
    id 'java'
    id 'application'
    id 'org.jetbrains.kotlin.jvm' version '1.5.21'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id "com.github.ben-manes.versions" version "0.39.0"
}

group 'eu.alessiobianchi'
version '0.1.0'

repositories {
    mavenCentral()
    jcenter()
    maven { url 'https://maven.google.com' }
}

mainClassName = "eu.alessiobianchi.svgandroidrasterizer.Main"

jar {
    manifest {
        attributes 'Implementation-Version': version
    }
}

shadowJar {
    archiveName = 'svg-android-rasterizer.jar'
}

run {
    // to pass arguments to the run task:
    //   gw run -Pargs="-t foo"
    if (project.hasProperty('args')) {
        //noinspection GroovyAssignabilityCheck
        args project.args.split('\\s+')
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.1"
    implementation "org.jetbrains.kotlin:kotlin-reflect" // transitiva di com.android.tools:sdk-common
    implementation "com.github.ajalt:clikt:2.8.0"
    implementation "org.json:json:20210307"
    implementation "com.android.tools:sdk-common:30.0.0-rc01"
    implementation "com.android.tools:common:30.0.0-rc01"
    implementation "com.andreapivetta.kolor:kolor:1.0.0"
}

task dist(type: Copy) {
    dependsOn shadowJar
    group = 'distribution'
    from shadowJar.archivePath
    into rootProject.projectDir
}

task distExec {
    dependsOn shadowJar
    group = 'distribution'
    description "Creates an executable JAR that can be executed directly, without using 'java -jar' (*nix only)"
    doLast {
        File jar = shadowJar.archivePath
        byte[] jarContent = jar.readBytes()
        File out = new File(rootProject.projectDir, jar.name.replace(".jar", ""))
        FileOutputStream fos = new FileOutputStream(out)
        fos.write("#!/usr/bin/env java -jar\n".getBytes(StandardCharsets.UTF_8))
        fos.write(jarContent)
        fos.close()
        out.executable = true
    }
}

sourceCompatibility = 1.8
compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}